name: 'Release CI'

# on new version tag create
on:
  push:
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-20.04' # aarch64 linux
            args: '--target aarch64-unknown-linux-gnu'
          - platform: 'ubuntu-20.04' # x86_64 linux
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'windows-latest' # aarch64 windows
            args: '--target aarch64-pc-windows-msvc'
          - platform: 'windows-latest' # x86_64 windows
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: enable cross-compile support (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-20.04'
        uses: cyberjunk/gha-ubuntu-cross@v4
        with:
          arch: arm64

      - name: install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.

      - name: install dependencies for arm64 (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt install aptitude
          sudo aptitude install -y \
            libwebkit2gtk-4.0-dev:arm64 \
            libappindicator3-dev:arm64 \
            librsvg2-dev:arm64 \
            libssl-dev:arm64 \
            patchelf:arm64

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Install the required compiler targets
          targets: ${{ 
            matrix.settings.platform == 'macos-latest' && 
              'aarch64-apple-darwin,x86_64-apple-darwin' || 
            matrix.settings.platform == 'ubuntu-20.04' && 
              'aarch64-unknown-linux-gnu,x86_64-unknown-linux-gnu' || 
            matrix.settings.platform == 'windows-latest' && 
              'aarch64-pc-windows-msvc,x86_64-pc-windows-msvc' || 
            '' }}

      - name: setup Rust linker for arm64 (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-20.04'
        run: |
          mkdir ./.cargo
          touch ./.cargo/config.toml
          echo -e " \
          [target.aarch64-unknown-linux-gnu] \n \
          linker = \"aarch64-linux-gnu-gcc\" \n \
          " >> ./.cargo/config.toml

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: 'Spotify Tauri v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.settings.args }}
